{"ast":null,"code":"var _jsxFileName = \"/Users/satendrayadav/Desktop/work_files/Test/myapp/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"@mui/material\";\nimport Stack from \"@mui/material/Stack\";\nimport Pagination from \"@mui/material/Pagination\";\nimport PaginationItem from \"@mui/material/PaginationItem\";\nimport { ArrowBackIcon } from \"@mui/icons-material/ArrowBack\";\nimport { ArrowForwardIcon } from \"@mui/icons-material/ArrowForward\";\n// const API_URL = \"https://api.example.com/items\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemList = () => {\n  _s();\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n  const fetchData = async () => {\n    try {\n      // Choose either API endpoint or local JSON file based on a condition\n      const apiUrl = process.env.REACT_APP_USE_API === \"true\" ? \"https://api.example.com/items\" : \"/data/items.json\"; // Assuming the JSON file is in the public folder\n\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setItems(data);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  console.log(items);\n  const handleRefresh = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      await fetchData();\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  const currentItems = items.slice(indexOfFirstItem, indexOfLastItem);\n\n  // const paginate = (pageNumber) => setCurrentPage(pageNumber);\n  const handlePageChange = (event, value) => {\n    setCurrentPage(value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center mb-4\",\n      children: \"Item List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this), !loading && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentItems.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: item.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        mt: 3,\n        children: /*#__PURE__*/_jsxDEV(Pagination, {\n          count: Math.ceil(items.length / itemsPerPage),\n          page: currentPage,\n          onChange: handlePageChange,\n          renderItem: item => /*#__PURE__*/_jsxDEV(PaginationItem, {\n            component: \"button\",\n            onClick: () => handlePageChange(null, item.page),\n            ...item,\n            slots: {\n              previous: ArrowBackIcon,\n              next: ArrowForwardIcon\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        sx: {\n          alignItems: \"center\"\n        },\n        variant: \"contained\",\n        color: \"success\",\n        onClick: handleRefresh,\n        children: \"Refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(ItemList, \"9A7q0unG/gWmKRNqK7MWIBCC0og=\");\n_c = ItemList;\nexport default ItemList;\nvar _c;\n$RefreshReg$(_c, \"ItemList\");","map":{"version":3,"names":["React","useState","useEffect","Button","Stack","Pagination","PaginationItem","ArrowBackIcon","ArrowForwardIcon","jsxDEV","_jsxDEV","ItemList","_s","items","setItems","loading","setLoading","error","setError","currentPage","setCurrentPage","itemsPerPage","fetchData","apiUrl","process","env","REACT_APP_USE_API","response","fetch","ok","Error","status","data","json","message","console","log","handleRefresh","indexOfLastItem","indexOfFirstItem","currentItems","slice","handlePageChange","event","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","name","description","id","spacing","justifyContent","alignItems","mt","count","Math","ceil","length","page","onChange","renderItem","component","onClick","slots","previous","next","sx","variant","color","_c","$RefreshReg$"],"sources":["/Users/satendrayadav/Desktop/work_files/Test/myapp/src/App.js"],"sourcesContent":["import \"./App.css\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"@mui/material\";\nimport Stack from \"@mui/material/Stack\";\nimport Pagination from \"@mui/material/Pagination\";\nimport PaginationItem from \"@mui/material/PaginationItem\";\nimport { ArrowBackIcon } from \"@mui/icons-material/ArrowBack\";\nimport { ArrowForwardIcon } from \"@mui/icons-material/ArrowForward\";\n// const API_URL = \"https://api.example.com/items\";\n\nconst ItemList = () => {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n\n  const fetchData = async () => {\n    try {\n      // Choose either API endpoint or local JSON file based on a condition\n      const apiUrl =\n        process.env.REACT_APP_USE_API === \"true\"\n          ? \"https://api.example.com/items\"\n          : \"/data/items.json\"; // Assuming the JSON file is in the public folder\n\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setItems(data);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  console.log(items);\n\n  const handleRefresh = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      await fetchData();\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  const currentItems = items.slice(indexOfFirstItem, indexOfLastItem);\n\n  // const paginate = (pageNumber) => setCurrentPage(pageNumber);\n  const handlePageChange = (event, value) => {\n    setCurrentPage(value);\n  };\n  return (\n    <div className=\"container\">\n      <h1 className=\"text-center mb-4\">Item List</h1>\n      {loading && <p>Loading...</p>}\n      {error && <p>Error: {error}</p>}\n      {!loading && !error && (\n        <div className=\"item-container\">\n          <ul>\n            {currentItems.map((item) => (\n              <li key={item.id}>\n                <h3>{item.name}</h3>\n                <p>{item.description}</p>\n              </li>\n            ))}\n          </ul>\n\n          <Stack spacing={2} justifyContent=\"center\" alignItems=\"center\" mt={3}>\n            <Pagination\n              count={Math.ceil(items.length / itemsPerPage)}\n              page={currentPage}\n              onChange={handlePageChange}\n              renderItem={(item) => (\n                <PaginationItem\n                  component=\"button\"\n                  onClick={() => handlePageChange(null, item.page)}\n                  {...item}\n                  slots={{ previous: ArrowBackIcon, next: ArrowForwardIcon }}\n                />\n              )}\n            />\n          </Stack>\n\n          <Button\n            sx={{ alignItems: \"center\" }}\n            variant=\"contained\"\n            color=\"success\"\n            onClick={handleRefresh}\n          >\n            Refresh\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ItemList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}